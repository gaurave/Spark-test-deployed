library app_bootstrap;

import 'package:polymer/polymer.dart';

import 'package:spark_widgets/common/spark_widget.dart' as i0;
import 'package:spark_widgets/spark_button/spark_button.dart' as i1;
import 'package:spark_widgets/spark_overlay/spark_overlay.dart' as i2;
import 'package:spark_widgets/spark_modal/spark_modal.dart' as i3;
import 'package:spark_widgets/spark_toolbar/spark_toolbar.dart' as i4;
import 'package:spark_widgets/spark_dialog/spark_dialog.dart' as i5;
import 'package:spark_widgets/spark_dialog_button/spark_dialog_button.dart' as i6;
import 'package:spark_widgets/spark_selection/spark_selection.dart' as i7;
import 'package:spark_widgets/spark_selector/spark_selector.dart' as i8;
import 'package:spark_widgets/spark_menu/spark_menu.dart' as i9;
import 'package:spark_widgets/spark_menu_button/spark_menu_button.dart' as i10;
import 'package:spark_widgets/spark_icon/spark_icon.dart' as i11;
import 'package:spark_widgets/spark_menu_item/spark_menu_item.dart' as i12;
import 'package:spark_widgets/spark_menu_separator/spark_menu_separator.dart' as i13;
import 'package:spark_widgets/spark_progress/spark_progress.dart' as i14;
import 'package:spark_widgets/spark_splitter/spark_splitter.dart' as i15;
import 'package:spark_widgets/spark_split_view/spark_split_view.dart' as i16;
import 'package:spark_widgets/spark_status/spark_status.dart' as i17;
import 'lib/ui/polymer/commit_message_view/commit_message_view.dart' as i18;
import 'lib/ui/polymer/goto_line_view/goto_line_view.dart' as i19;
import 'spark_polymer_ui.dart' as i20;
import 'package:smoke/smoke.dart' show Declaration, PROPERTY, METHOD;
import 'package:smoke/static.dart' show useGeneratedCode, StaticConfiguration;
import 'package:spark_widgets/common/spark_widget.dart' as smoke_0;
import 'package:polymer/polymer.dart' as smoke_1;
import 'package:spark_widgets/spark_button/spark_button.dart' as smoke_2;
import 'dart:html' as smoke_3;
import 'dart:nativewrappers' as smoke_4;
import 'package:spark_widgets/spark_overlay/spark_overlay.dart' as smoke_5;
import 'package:spark_widgets/spark_modal/spark_modal.dart' as smoke_6;
import 'package:spark_widgets/spark_toolbar/spark_toolbar.dart' as smoke_7;
import 'package:spark_widgets/spark_dialog/spark_dialog.dart' as smoke_8;
import 'package:spark_widgets/spark_dialog_button/spark_dialog_button.dart' as smoke_9;
import 'package:spark_widgets/spark_selection/spark_selection.dart' as smoke_10;
import 'package:spark_widgets/spark_selector/spark_selector.dart' as smoke_11;
import 'package:spark_widgets/spark_menu/spark_menu.dart' as smoke_12;
import 'package:spark_widgets/spark_menu_button/spark_menu_button.dart' as smoke_13;
import 'package:spark_widgets/spark_icon/spark_icon.dart' as smoke_14;
import 'package:spark_widgets/spark_menu_item/spark_menu_item.dart' as smoke_15;
import 'package:spark_widgets/spark_menu_separator/spark_menu_separator.dart' as smoke_16;
import 'package:spark_widgets/spark_progress/spark_progress.dart' as smoke_17;
import 'package:spark_widgets/spark_splitter/spark_splitter.dart' as smoke_18;
import 'package:spark_widgets/spark_split_view/spark_split_view.dart' as smoke_19;
import 'package:spark_widgets/spark_status/spark_status.dart' as smoke_20;
import 'lib/ui/polymer/commit_message_view/commit_message_view.dart' as smoke_21;
import 'package:observe/src/metadata.dart' as smoke_22;
import 'lib/scm.dart' as smoke_23;
import 'lib/ui/polymer/goto_line_view/goto_line_view.dart' as smoke_24;
import 'spark_polymer_ui.dart' as smoke_25;
abstract class _M0 {} // HtmlElement & Polymer
abstract class _M1 {} // _M0 & ChangeNotifier
abstract class _M2 {} // SparkWidget & ChangeNotifier

void main() {
  useGeneratedCode(new StaticConfiguration(
      checkedMode: false,
      getters: {
        #active: (o) => o.active,
        #activeAttr: (o) => o.activeAttr,
        #activeClass: (o) => o.activeClass,
        #animation: (o) => o.animation,
        #arrow: (o) => o.arrow,
        #authorEmail: (o) => o.authorEmail,
        #authorName: (o) => o.authorName,
        #autoClose: (o) => o.autoClose,
        #cancel: (o) => o.cancel,
        #cancelClickHandler: (o) => o.cancelClickHandler,
        #chromeOS: (o) => o.chromeOS,
        #commitInfo: (o) => o.commitInfo,
        #dateString: (o) => o.dateString,
        #defaultMessage: (o) => o.defaultMessage,
        #description: (o) => o.description,
        #developerMode: (o) => o.developerMode,
        #direction: (o) => o.direction,
        #directionChanged: (o) => o.directionChanged,
        #disabled: (o) => o.disabled,
        #dismiss: (o) => o.dismiss,
        #fileFilterInputHandler: (o) => o.fileFilterInputHandler,
        #fileFilterKeydownHandler: (o) => o.fileFilterKeydownHandler,
        #flat: (o) => o.flat,
        #handle: (o) => o.handle,
        #handleAnchorClick: (o) => o.handleAnchorClick,
        #horizontal: (o) => o.horizontal,
        #icon: (o) => o.icon,
        #iconSize: (o) => o.iconSize,
        #identifier: (o) => o.identifier,
        #inSelection: (o) => o.inSelection,
        #inSelectionChanged: (o) => o.inSelectionChanged,
        #indeterminate: (o) => o.indeterminate,
        #indeterminateChanged: (o) => o.indeterminateChanged,
        #isNotEmpty: (o) => o.isNotEmpty,
        #itemFilter: (o) => o.itemFilter,
        #justify: (o) => o.justify,
        #keyDownHandler: (o) => o.keyDownHandler,
        #label: (o) => o.label,
        #locked: (o) => o.locked,
        #maxTargetSize: (o) => o.maxTargetSize,
        #menuActivateHandler: (o) => o.menuActivateHandler,
        #message: (o) => o.message,
        #minTargetSize: (o) => o.minTargetSize,
        #modal: (o) => o.modal,
        #multi: (o) => o.multi,
        #onFontLarger: (o) => o.onFontLarger,
        #onFontSmaller: (o) => o.onFontSmaller,
        #onKeysMinus: (o) => o.onKeysMinus,
        #onKeysPlus: (o) => o.onKeysPlus,
        #onMenuSelected: (o) => o.onMenuSelected,
        #onResetGit: (o) => o.onResetGit,
        #onResetPreference: (o) => o.onResetPreference,
        #onSplitterUpdate: (o) => o.onSplitterUpdate,
        #onThemeMinus: (o) => o.onThemeMinus,
        #onThemePlus: (o) => o.onThemePlus,
        #opened: (o) => o.opened,
        #openedChanged: (o) => o.openedChanged,
        #overlayOpenedHandler: (o) => o.overlayOpenedHandler,
        #padding: (o) => o.padding,
        #primary: (o) => o.primary,
        #progressMessage: (o) => o.progressMessage,
        #raised: (o) => o.raised,
        #responsive: (o) => o.responsive,
        #round: (o) => o.round,
        #secondary: (o) => o.secondary,
        #selected: (o) => o.selected,
        #selectedAttr: (o) => o.selectedAttr,
        #selectedClass: (o) => o.selectedClass,
        #selectionSelectHandler: (o) => o.selectionSelectHandler,
        #showCancel: (o) => o.showCancel,
        #showNoFileFilterMatches: (o) => o.showNoFileFilterMatches,
        #showProgressMessage: (o) => o.showProgressMessage,
        #showWipProjectTemplates: (o) => o.showWipProjectTemplates,
        #size: (o) => o.size,
        #spacing: (o) => o.spacing,
        #spinning: (o) => o.spinning,
        #splitViewPosition: (o) => o.splitViewPosition,
        #splitViewPositionChanged: (o) => o.splitViewPositionChanged,
        #splitterHandle: (o) => o.splitterHandle,
        #splitterSize: (o) => o.splitterSize,
        #splitterUpdateHandler: (o) => o.splitterUpdateHandler,
        #src: (o) => o.src,
        #submit: (o) => o.submit,
        #targetSize: (o) => o.targetSize,
        #targetSizeChanged: (o) => o.targetSizeChanged,
        #temporaryMessage: (o) => o.temporaryMessage,
        #title: (o) => o.title,
        #tooltip: (o) => o.tooltip,
        #useAceThemes: (o) => o.useAceThemes,
        #value: (o) => o.value,
        #valueAttr: (o) => o.valueAttr,
        #vertical: (o) => o.vertical,
        #visible: (o) => o.visible,
      },
      setters: {
        #active: (o, v) { o.active = v; },
        #activeAttr: (o, v) { o.activeAttr = v; },
        #activeClass: (o, v) { o.activeClass = v; },
        #animation: (o, v) { o.animation = v; },
        #arrow: (o, v) { o.arrow = v; },
        #autoClose: (o, v) { o.autoClose = v; },
        #cancel: (o, v) { o.cancel = v; },
        #chromeOS: (o, v) { o.chromeOS = v; },
        #commitInfo: (o, v) { o.commitInfo = v; },
        #defaultMessage: (o, v) { o.defaultMessage = v; },
        #description: (o, v) { o.description = v; },
        #developerMode: (o, v) { o.developerMode = v; },
        #direction: (o, v) { o.direction = v; },
        #disabled: (o, v) { o.disabled = v; },
        #dismiss: (o, v) { o.dismiss = v; },
        #flat: (o, v) { o.flat = v; },
        #handle: (o, v) { o.handle = v; },
        #horizontal: (o, v) { o.horizontal = v; },
        #icon: (o, v) { o.icon = v; },
        #iconSize: (o, v) { o.iconSize = v; },
        #inSelection: (o, v) { o.inSelection = v; },
        #indeterminate: (o, v) { o.indeterminate = v; },
        #itemFilter: (o, v) { o.itemFilter = v; },
        #justify: (o, v) { o.justify = v; },
        #label: (o, v) { o.label = v; },
        #locked: (o, v) { o.locked = v; },
        #maxTargetSize: (o, v) { o.maxTargetSize = v; },
        #minTargetSize: (o, v) { o.minTargetSize = v; },
        #modal: (o, v) { o.modal = v; },
        #multi: (o, v) { o.multi = v; },
        #opened: (o, v) { o.opened = v; },
        #padding: (o, v) { o.padding = v; },
        #primary: (o, v) { o.primary = v; },
        #progressMessage: (o, v) { o.progressMessage = v; },
        #raised: (o, v) { o.raised = v; },
        #responsive: (o, v) { o.responsive = v; },
        #round: (o, v) { o.round = v; },
        #secondary: (o, v) { o.secondary = v; },
        #selected: (o, v) { o.selected = v; },
        #selectedAttr: (o, v) { o.selectedAttr = v; },
        #selectedClass: (o, v) { o.selectedClass = v; },
        #showCancel: (o, v) { o.showCancel = v; },
        #showNoFileFilterMatches: (o, v) { o.showNoFileFilterMatches = v; },
        #showProgressMessage: (o, v) { o.showProgressMessage = v; },
        #showWipProjectTemplates: (o, v) { o.showWipProjectTemplates = v; },
        #size: (o, v) { o.size = v; },
        #spacing: (o, v) { o.spacing = v; },
        #spinning: (o, v) { o.spinning = v; },
        #splitViewPosition: (o, v) { o.splitViewPosition = v; },
        #splitterHandle: (o, v) { o.splitterHandle = v; },
        #splitterSize: (o, v) { o.splitterSize = v; },
        #src: (o, v) { o.src = v; },
        #submit: (o, v) { o.submit = v; },
        #targetSize: (o, v) { o.targetSize = v; },
        #temporaryMessage: (o, v) { o.temporaryMessage = v; },
        #title: (o, v) { o.title = v; },
        #tooltip: (o, v) { o.tooltip = v; },
        #useAceThemes: (o, v) { o.useAceThemes = v; },
        #value: (o, v) { o.value = v; },
        #valueAttr: (o, v) { o.valueAttr = v; },
        #vertical: (o, v) { o.vertical = v; },
        #visible: (o, v) { o.visible = v; },
      },
      parents: {
        smoke_3.Element: smoke_3.Node,
        smoke_3.EventTarget: smoke_4.NativeFieldWrapperClass2,
        smoke_3.HtmlElement: smoke_3.Element,
        smoke_3.Node: smoke_3.EventTarget,
        smoke_21.CommitMessageView: _M2,
        smoke_24.GotoLineView: smoke_0.SparkWidget,
        smoke_1.PolymerElement: _M1,
        smoke_0.SparkWidget: smoke_1.PolymerElement,
        smoke_2.SparkButton: smoke_0.SparkWidget,
        smoke_8.SparkDialog: smoke_0.SparkWidget,
        smoke_9.SparkDialogButton: smoke_0.SparkWidget,
        smoke_14.SparkIcon: smoke_0.SparkWidget,
        smoke_12.SparkMenu: smoke_11.SparkSelector,
        smoke_13.SparkMenuButton: smoke_0.SparkWidget,
        smoke_15.SparkMenuItem: smoke_0.SparkWidget,
        smoke_16.SparkMenuSeparator: smoke_0.SparkWidget,
        smoke_6.SparkModal: smoke_5.SparkOverlay,
        smoke_5.SparkOverlay: smoke_0.SparkWidget,
        smoke_17.SparkProgress: smoke_0.SparkWidget,
        smoke_10.SparkSelection: smoke_0.SparkWidget,
        smoke_11.SparkSelector: smoke_0.SparkWidget,
        smoke_19.SparkSplitView: smoke_0.SparkWidget,
        smoke_18.SparkSplitter: smoke_0.SparkWidget,
        smoke_20.SparkStatus: smoke_0.SparkWidget,
        smoke_7.SparkToolbar: smoke_0.SparkWidget,
        smoke_25.SparkPolymerUI: _M2,
        _M0: smoke_3.HtmlElement,
        _M1: _M0,
        _M2: smoke_0.SparkWidget,
      },
      declarations: {
        smoke_3.Element: const {},
        smoke_3.EventTarget: const {},
        smoke_3.Node: const {},
        smoke_4.NativeFieldWrapperClass2: const {},
        smoke_21.CommitMessageView: {
          #commitInfo: const Declaration(#commitInfo, smoke_23.CommitInfo, kind: PROPERTY, annotations: const [smoke_22.reflectable, smoke_22.observable]),
        },
        smoke_24.GotoLineView: const {},
        smoke_1.PolymerElement: const {},
        smoke_0.SparkWidget: const {},
        smoke_2.SparkButton: {
          #active: const Declaration(#active, bool, annotations: const [smoke_1.published]),
          #disabled: const Declaration(#disabled, bool, annotations: const [smoke_1.published]),
          #flat: const Declaration(#flat, bool, annotations: const [smoke_1.published]),
          #padding: const Declaration(#padding, String, annotations: const [smoke_1.published]),
          #primary: const Declaration(#primary, bool, annotations: const [smoke_1.published]),
          #raised: const Declaration(#raised, bool, annotations: const [smoke_1.published]),
          #round: const Declaration(#round, bool, annotations: const [smoke_1.published]),
        },
        smoke_8.SparkDialog: {
          #animation: const Declaration(#animation, String, annotations: const [smoke_1.published]),
          #title: const Declaration(#title, String, annotations: const [smoke_1.published]),
        },
        smoke_9.SparkDialogButton: {
          #cancel: const Declaration(#cancel, bool, annotations: const [smoke_1.published]),
          #disabled: const Declaration(#disabled, bool, annotations: const [smoke_1.published]),
          #dismiss: const Declaration(#dismiss, bool, annotations: const [smoke_1.published]),
          #secondary: const Declaration(#secondary, bool, annotations: const [smoke_1.published]),
          #submit: const Declaration(#submit, bool, annotations: const [smoke_1.published]),
        },
        smoke_14.SparkIcon: {
          #size: const Declaration(#size, String, annotations: const [smoke_1.published]),
          #src: const Declaration(#src, String, annotations: const [smoke_1.published]),
          #tooltip: const Declaration(#tooltip, String, annotations: const [smoke_1.published]),
        },
        smoke_12.SparkMenu: const {},
        smoke_13.SparkMenuButton: {
          #arrow: const Declaration(#arrow, String, annotations: const [smoke_1.published]),
          #opened: const Declaration(#opened, bool, annotations: const [smoke_1.published]),
          #responsive: const Declaration(#responsive, bool, annotations: const [smoke_1.published]),
          #selected: const Declaration(#selected, dynamic, annotations: const [smoke_1.published]),
          #valueAttr: const Declaration(#valueAttr, String, annotations: const [smoke_1.published]),
        },
        smoke_15.SparkMenuItem: {
          #description: const Declaration(#description, String, annotations: const [smoke_1.published]),
          #icon: const Declaration(#icon, String, annotations: const [smoke_1.published]),
          #iconSize: const Declaration(#iconSize, String, annotations: const [smoke_1.published]),
          #label: const Declaration(#label, String, annotations: const [smoke_1.published]),
        },
        smoke_16.SparkMenuSeparator: const {},
        smoke_6.SparkModal: const {},
        smoke_5.SparkOverlay: {
          #animation: const Declaration(#animation, String, annotations: const [smoke_1.published]),
          #arrow: const Declaration(#arrow, String, annotations: const [smoke_1.published]),
          #autoClose: const Declaration(#autoClose, bool, annotations: const [smoke_1.published]),
          #modal: const Declaration(#modal, bool, annotations: const [smoke_1.published]),
          #opened: const Declaration(#opened, bool, kind: PROPERTY, annotations: const [smoke_1.published]),
          #openedChanged: const Declaration(#openedChanged, Function, kind: METHOD),
        },
        smoke_17.SparkProgress: {
          #indeterminate: const Declaration(#indeterminate, bool, annotations: const [smoke_1.published]),
          #indeterminateChanged: const Declaration(#indeterminateChanged, Function, kind: METHOD),
          #progressMessage: const Declaration(#progressMessage, String, annotations: const [smoke_1.published]),
          #showCancel: const Declaration(#showCancel, bool, annotations: const [smoke_1.published]),
          #showProgressMessage: const Declaration(#showProgressMessage, bool, annotations: const [smoke_1.published]),
          #value: const Declaration(#value, num, kind: PROPERTY, annotations: const [smoke_1.published]),
          #visible: const Declaration(#visible, bool, kind: PROPERTY, annotations: const [smoke_1.published]),
        },
        smoke_10.SparkSelection: {
          #multi: const Declaration(#multi, bool, annotations: const [smoke_1.published]),
        },
        smoke_11.SparkSelector: {
          #activeAttr: const Declaration(#activeAttr, String, annotations: const [smoke_1.published]),
          #activeClass: const Declaration(#activeClass, String, annotations: const [smoke_1.published]),
          #inSelection: const Declaration(#inSelection, dynamic, annotations: const [smoke_1.published]),
          #inSelectionChanged: const Declaration(#inSelectionChanged, Function, kind: METHOD),
          #itemFilter: const Declaration(#itemFilter, String, annotations: const [smoke_1.published]),
          #multi: const Declaration(#multi, bool, annotations: const [smoke_1.published]),
          #selectedAttr: const Declaration(#selectedAttr, String, annotations: const [smoke_1.published]),
          #selectedClass: const Declaration(#selectedClass, String, annotations: const [smoke_1.published]),
          #valueAttr: const Declaration(#valueAttr, String, annotations: const [smoke_1.published]),
        },
        smoke_19.SparkSplitView: {
          #direction: const Declaration(#direction, String, annotations: const [smoke_1.published]),
          #locked: const Declaration(#locked, bool, annotations: const [smoke_1.published]),
          #maxTargetSize: const Declaration(#maxTargetSize, int, annotations: const [smoke_1.published]),
          #minTargetSize: const Declaration(#minTargetSize, int, annotations: const [smoke_1.published]),
          #splitterHandle: const Declaration(#splitterHandle, bool, annotations: const [smoke_1.published]),
          #splitterSize: const Declaration(#splitterSize, int, annotations: const [smoke_1.published]),
          #targetSize: const Declaration(#targetSize, int, annotations: const [smoke_1.published]),
          #targetSizeChanged: const Declaration(#targetSizeChanged, Function, kind: METHOD),
        },
        smoke_18.SparkSplitter: {
          #direction: const Declaration(#direction, String, annotations: const [smoke_1.published]),
          #directionChanged: const Declaration(#directionChanged, Function, kind: METHOD),
          #handle: const Declaration(#handle, bool, annotations: const [smoke_1.published]),
          #locked: const Declaration(#locked, bool, annotations: const [smoke_1.published]),
          #maxTargetSize: const Declaration(#maxTargetSize, int, annotations: const [smoke_1.published]),
          #minTargetSize: const Declaration(#minTargetSize, int, annotations: const [smoke_1.published]),
          #size: const Declaration(#size, int, annotations: const [smoke_1.published]),
          #targetSize: const Declaration(#targetSize, int, annotations: const [smoke_1.published]),
          #targetSizeChanged: const Declaration(#targetSizeChanged, Function, kind: METHOD),
        },
        smoke_20.SparkStatus: {
          #defaultMessage: const Declaration(#defaultMessage, String, kind: PROPERTY, annotations: const [smoke_1.published]),
          #progressMessage: const Declaration(#progressMessage, String, kind: PROPERTY, annotations: const [smoke_1.published]),
          #spinning: const Declaration(#spinning, bool, kind: PROPERTY, annotations: const [smoke_1.published]),
          #temporaryMessage: const Declaration(#temporaryMessage, String, kind: PROPERTY, annotations: const [smoke_1.published]),
        },
        smoke_7.SparkToolbar: {
          #horizontal: const Declaration(#horizontal, bool, annotations: const [smoke_1.published]),
          #justify: const Declaration(#justify, String, annotations: const [smoke_1.published]),
          #spacing: const Declaration(#spacing, String, annotations: const [smoke_1.published]),
          #vertical: const Declaration(#vertical, bool, annotations: const [smoke_1.published]),
        },
        smoke_25.SparkPolymerUI: {
          #chromeOS: const Declaration(#chromeOS, bool, kind: PROPERTY, annotations: const [smoke_22.reflectable, smoke_22.observable]),
          #developerMode: const Declaration(#developerMode, bool, kind: PROPERTY, annotations: const [smoke_22.reflectable, smoke_22.observable]),
          #showNoFileFilterMatches: const Declaration(#showNoFileFilterMatches, bool, kind: PROPERTY, annotations: const [smoke_22.reflectable, smoke_22.observable]),
          #showWipProjectTemplates: const Declaration(#showWipProjectTemplates, bool, kind: PROPERTY, annotations: const [smoke_22.reflectable, smoke_22.observable]),
          #splitViewPosition: const Declaration(#splitViewPosition, int, kind: PROPERTY, annotations: const [smoke_22.reflectable, smoke_1.published]),
          #splitViewPositionChanged: const Declaration(#splitViewPositionChanged, Function, kind: METHOD),
          #useAceThemes: const Declaration(#useAceThemes, bool, kind: PROPERTY, annotations: const [smoke_22.reflectable, smoke_22.observable]),
        },
        _M0: const {},
        _M1: const {},
      },
      names: {
        #active: r'active',
        #activeAttr: r'activeAttr',
        #activeClass: r'activeClass',
        #animation: r'animation',
        #arrow: r'arrow',
        #authorEmail: r'authorEmail',
        #authorName: r'authorName',
        #autoClose: r'autoClose',
        #cancel: r'cancel',
        #cancelClickHandler: r'cancelClickHandler',
        #chromeOS: r'chromeOS',
        #commitInfo: r'commitInfo',
        #dateString: r'dateString',
        #defaultMessage: r'defaultMessage',
        #description: r'description',
        #developerMode: r'developerMode',
        #direction: r'direction',
        #directionChanged: r'directionChanged',
        #disabled: r'disabled',
        #dismiss: r'dismiss',
        #fileFilterInputHandler: r'fileFilterInputHandler',
        #fileFilterKeydownHandler: r'fileFilterKeydownHandler',
        #flat: r'flat',
        #handle: r'handle',
        #handleAnchorClick: r'handleAnchorClick',
        #horizontal: r'horizontal',
        #icon: r'icon',
        #iconSize: r'iconSize',
        #identifier: r'identifier',
        #inSelection: r'inSelection',
        #inSelectionChanged: r'inSelectionChanged',
        #indeterminate: r'indeterminate',
        #indeterminateChanged: r'indeterminateChanged',
        #isNotEmpty: r'isNotEmpty',
        #itemFilter: r'itemFilter',
        #justify: r'justify',
        #keyDownHandler: r'keyDownHandler',
        #label: r'label',
        #locked: r'locked',
        #maxTargetSize: r'maxTargetSize',
        #menuActivateHandler: r'menuActivateHandler',
        #message: r'message',
        #minTargetSize: r'minTargetSize',
        #modal: r'modal',
        #multi: r'multi',
        #onFontLarger: r'onFontLarger',
        #onFontSmaller: r'onFontSmaller',
        #onKeysMinus: r'onKeysMinus',
        #onKeysPlus: r'onKeysPlus',
        #onMenuSelected: r'onMenuSelected',
        #onResetGit: r'onResetGit',
        #onResetPreference: r'onResetPreference',
        #onSplitterUpdate: r'onSplitterUpdate',
        #onThemeMinus: r'onThemeMinus',
        #onThemePlus: r'onThemePlus',
        #opened: r'opened',
        #openedChanged: r'openedChanged',
        #overlayOpenedHandler: r'overlayOpenedHandler',
        #padding: r'padding',
        #primary: r'primary',
        #progressMessage: r'progressMessage',
        #raised: r'raised',
        #responsive: r'responsive',
        #round: r'round',
        #secondary: r'secondary',
        #selected: r'selected',
        #selectedAttr: r'selectedAttr',
        #selectedClass: r'selectedClass',
        #selectionSelectHandler: r'selectionSelectHandler',
        #showCancel: r'showCancel',
        #showNoFileFilterMatches: r'showNoFileFilterMatches',
        #showProgressMessage: r'showProgressMessage',
        #showWipProjectTemplates: r'showWipProjectTemplates',
        #size: r'size',
        #spacing: r'spacing',
        #spinning: r'spinning',
        #splitViewPosition: r'splitViewPosition',
        #splitViewPositionChanged: r'splitViewPositionChanged',
        #splitterHandle: r'splitterHandle',
        #splitterSize: r'splitterSize',
        #splitterUpdateHandler: r'splitterUpdateHandler',
        #src: r'src',
        #submit: r'submit',
        #targetSize: r'targetSize',
        #targetSizeChanged: r'targetSizeChanged',
        #temporaryMessage: r'temporaryMessage',
        #title: r'title',
        #tooltip: r'tooltip',
        #useAceThemes: r'useAceThemes',
        #value: r'value',
        #valueAttr: r'valueAttr',
        #vertical: r'vertical',
        #visible: r'visible',
      }));
  startPolymer([
      () => Polymer.register('spark-widget', i0.SparkWidget),
      () => Polymer.register('spark-button', i1.SparkButton),
      () => Polymer.register('spark-overlay', i2.SparkOverlay),
      () => Polymer.register('spark-modal', i3.SparkModal),
      () => Polymer.register('spark-toolbar', i4.SparkToolbar),
      () => Polymer.register('spark-dialog', i5.SparkDialog),
      () => Polymer.register('spark-dialog-button', i6.SparkDialogButton),
      () => Polymer.register('spark-selection', i7.SparkSelection),
      () => Polymer.register('spark-selector', i8.SparkSelector),
      () => Polymer.register('spark-menu', i9.SparkMenu),
      () => Polymer.register('spark-menu-button', i10.SparkMenuButton),
      () => Polymer.register('spark-icon', i11.SparkIcon),
      () => Polymer.register('spark-menu-item', i12.SparkMenuItem),
      () => Polymer.register('spark-menu-separator', i13.SparkMenuSeparator),
      () => Polymer.register('spark-progress', i14.SparkProgress),
      () => Polymer.register('spark-splitter', i15.SparkSplitter),
      () => Polymer.register('spark-split-view', i16.SparkSplitView),
      () => Polymer.register('spark-status', i17.SparkStatus),
      () => Polymer.register('commit-message-view', i18.CommitMessageView),
      () => Polymer.register('goto-line-view', i19.GotoLineView),
      () => Polymer.register('spark-polymer-ui', i20.SparkPolymerUI),
    ]);
}
